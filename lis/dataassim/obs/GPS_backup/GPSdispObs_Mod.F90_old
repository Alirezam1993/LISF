!-----------------------BEGIN NOTICE -- DO NOT EDIT-----------------------
! NASA Goddard Space Flight Center Land Information System (LIS) v7.2
!
! Copyright (c) 2015 United States Government as represented by the
! Administrator of the National Aeronautics and Space Administration.
! All Rights Reserved.
!-------------------------END NOTICE -- DO NOT EDIT-----------------------
!BOP
!
! !MODULE: GPSdispObs_Mod
! 
! !DESCRIPTION: 
!   This module contains interfaces and subroutines to
!   handle GPS vertical displacement observations
!   
! !REVISION HISTORY: 
!  27Feb05    Sujay Kumar;   Initial Specification
!  29Sep17    Yonghwan Kwon;  Modified for DTB observations
!  14Aug20    Gaohong Yin; Changed for GPS displacement DA 
!  24Oct23    Assistant; Corrected to align with GRACE code
! 
module GPSdispObs_Mod
! !USES: 
  use ESMF
  use LIS_constantsMod, only : LIS_CONST_PATH_LEN
  use LIS_coreMod
  use LIS_timeMgrMod
  use LIS_logMod
  use LIS_DAobservationsMod
  use LIS_perturbMod
!EOP
  implicit none
  PRIVATE
!-----------------------------------------------------------------------------
! !PUBLIC MEMBER FUNCTIONS:
!-----------------------------------------------------------------------------
  PUBLIC :: GPSdispObs_setup
!-----------------------------------------------------------------------------
! !PUBLIC TYPES:
!-----------------------------------------------------------------------------
  PUBLIC :: GPS_struc

  type, public :: GPS_dec
     integer           :: mo
     integer           :: alarmhr
     integer           :: useDistErr
  end type GPS_dec
  
  type(GPS_dec), allocatable :: GPS_struc(:)
  
contains
!BOP
! 
! !ROUTINE: GPSdispObs_setup
! \label{GPSdispObs_setup}
! 
! !INTERFACE: 
  subroutine GPSdispObs_setup(k, OBS_State, OBS_Pert_State)
! !USES: 

! !ARGUMENTS: 
    integer                ::  k
    type(ESMF_State)       ::  OBS_State(LIS_rc%nnest)
    type(ESMF_State)       ::  OBS_Pert_State(LIS_rc%nnest)
! 
! !DESCRIPTION:
!   
!   This routine completes the runtime initializations and 
!   creation of data structures required for GPS displacement assimilation
!  
!   The arguments are: 
!   \begin{description}
!    \item[OBS\_State]   observation state 
!    \item[OBS\_Pert\_State] observation perturbations state
!   \end{description}
!EOP
    integer                ::  n, m 
    integer                ::  ftn
    integer                ::  i
    integer                ::  status
    type(ESMF_Field)       ::  obsField(LIS_rc%nnest)
    type(ESMF_ArraySpec)   ::  intarrspec, realarrspec
    type(ESMF_Field)       ::  pertField(LIS_rc%nnest)
    type(ESMF_ArraySpec)   ::  pertArrSpec
    character(len=LIS_CONST_PATH_LEN) :: GPSdispobsdir
    character*100          ::  temp

    real, allocatable      :: ssdev(:)
    character*1            :: vid(2)
    character*40, allocatable :: vname(:)
    real, allocatable      :: varmin(:)
    real, allocatable      :: varmax(:)
    type(pert_dec_type)    :: obs_pert
    real, pointer          :: obs_temp(:,:)
    integer                :: num_obs  ! Number of observations

    ! Allocate GPS structure
    if (.not. allocated(GPS_struc)) then
        allocate(GPS_struc(LIS_rc%nnest))
    endif

    ! Set up array specifications
    call ESMF_ArraySpecSet(intarrspec, rank=1, typekind=ESMF_TYPEKIND_I4, rc=status)
    call LIS_verify(status, 'Error in ESMF_ArraySpecSet for intarrspec')

    call ESMF_ArraySpecSet(realarrspec, rank=1, typekind=ESMF_TYPEKIND_R4, rc=status)
    call LIS_verify(status, 'Error in ESMF_ArraySpecSet for realarrspec')

    call ESMF_ArraySpecSet(pertArrSpec, rank=2, typekind=ESMF_TYPEKIND_R4, rc=status)
    call LIS_verify(status, 'Error in ESMF_ArraySpecSet for pertArrSpec')

    ! Get GPS data directory
    call ESMF_ConfigFindLabel(LIS_config, "GPS Displacement data directory:", rc=status)
    call LIS_verify(status, 'GPS Displacement data directory label not found')

    do n=1, LIS_rc%nnest
        call ESMF_ConfigGetAttribute(LIS_config, GPSdispobsdir, rc=status)
        call LIS_verify(status, 'GPS Displacement data directory not defined')
        
        ! Set initial attributes for OBS_State
        call ESMF_AttributeSet(OBS_State(n), "Data Directory", GPSdispobsdir, rc=status)
        call LIS_verify(status, 'Error setting Data Directory attribute')
        
        call ESMF_AttributeSet(OBS_State(n), "Data Update Status", .false., rc=status)
        call LIS_verify(status, 'Error setting Data Update Status attribute')
        
        call ESMF_AttributeSet(OBS_State(n), "Data Update Time", -99.0, rc=status)
        call LIS_verify(status, 'Error setting Data Update Time attribute')
        
        call ESMF_AttributeSet(OBS_State(n), "Data Assimilate Status", .false., rc=status)
        call LIS_verify(status, 'Error setting Data Assimilate Status attribute')

        ! Create observation field
        write(unit=temp, fmt='(i2.2)') 1
        read(unit=temp, fmt='(2a1)') vid

        obsField(n) = ESMF_FieldCreate(arrayspec=realarrspec, &
                                     grid=LIS_obsvecGrid(n,k), &
                                     name="Observation"//vid(1)//vid(2), &
                                     rc=status)
        call LIS_verify(status, 'Error in ESMF_FieldCreate for obsField')

        ! Read observation attributes
        write(LIS_logunit,*) '[INFO] Opening attributes for observations ', &
             trim(LIS_rc%obsattribfile(k))
        ftn = LIS_getNextUnitNumber()
        open(ftn, file=trim(LIS_rc%obsattribfile(k)), status='old')
        read(ftn,*)
        read(ftn,*) LIS_rc%nobtypes(k)
        read(ftn,*)

        allocate(vname(LIS_rc%nobtypes(k)))
        allocate(varmax(LIS_rc%nobtypes(k)))
        allocate(varmin(LIS_rc%nobtypes(k)))

        do i=1, LIS_rc%nobtypes(k)
            read(ftn,fmt='(a40)') vname(i)
            read(ftn,*) varmin(i), varmax(i)
            write(LIS_logunit,*) '[INFO] ', vname(i), varmin(i), varmax(i)
        enddo
        call LIS_releaseUnitNumber(ftn)

        ! Determine the number of observations (num_obs)
        ! For the purpose of this example, we'll assume num_obs is known or read from the data
        ! In practice, you should determine num_obs based on your GPS data
        num_obs = [number of observations in your data]  ! Replace with actual value or code to determine it

        ! Set the number of observations in LIS_rc%obs_ngrid(k)
        LIS_rc%obs_ngrid(k) = num_obs

        ! Set the "Number Of Observations" attribute in OBS_State(n)
        call ESMF_AttributeSet(OBS_State(n), "Number Of Observations", &
             LIS_rc%obs_ngrid(k), rc=status)
        call LIS_verify(status, 'Error setting "Number Of Observations" attribute in OBS_State')

        allocate(ssdev(LIS_rc%obs_ngrid(k)))

        ! Handle perturbations
        if(trim(LIS_rc%perturb_obs(k)) /= "none") then
            ! Allocate perturbation structure
            allocate(obs_pert%vname(1))
            allocate(obs_pert%perttype(1))
            allocate(obs_pert%ssdev(1))
            allocate(obs_pert%stdmax(1))
            allocate(obs_pert%zeromean(1))
            allocate(obs_pert%tcorr(1))
            allocate(obs_pert%xcorr(1))
            allocate(obs_pert%ycorr(1))
            allocate(obs_pert%ccorr(1,1))

            ! Read perturbation attributes
            call LIS_readPertAttributes(1, LIS_rc%obspertAttribfile(k), obs_pert)
            ssdev = obs_pert%ssdev(1)

            ! Create perturbation field
            pertField(n) = ESMF_FieldCreate(arrayspec=pertArrSpec, &
                                          grid=LIS_obsEnsOnGrid(n,k), &
                                          name="Observation"//vid(1)//vid(2), &
                                          rc=status)
            call LIS_verify(status, 'Error in ESMF_FieldCreate for pertField')

            ! Initialize perturbations to zero
            call ESMF_FieldGet(pertField(n), localDE=0, farrayPtr=obs_temp, rc=status)
            call LIS_verify(status, 'Error in ESMF_FieldGet for pertField')
            obs_temp(:,:) = 0

            ! Set perturbation attributes
            call ESMF_AttributeSet(pertField(n), "Perturbation Type", &
                 obs_pert%perttype(1), rc=status)
            call LIS_verify(status, 'Error setting Perturbation Type attribute')

            if(LIS_rc%obs_ngrid(k) > 0) then
                call ESMF_AttributeSet(pertField(n), "Standard Deviation", &
                     ssdev, itemCount=LIS_rc%obs_ngrid(k), rc=status)
                call LIS_verify(status, 'Error setting Standard Deviation attribute')
            else
                write(LIS_logunit,*) '[WARN] No grid points for Standard Deviation'
            endif

            call ESMF_AttributeSet(pertField(n), "Std Normal Max", &
                 obs_pert%stdmax(1), rc=status)
            call LIS_verify(status, 'Error setting Std Normal Max attribute')

            call ESMF_AttributeSet(pertField(n), "Ensure Zero Mean", &
                 obs_pert%zeromean(1), rc=status)
            call LIS_verify(status, 'Error setting Ensure Zero Mean attribute')

            call ESMF_AttributeSet(pertField(n), "Temporal Correlation Scale", &
                 obs_pert%tcorr(1), rc=status)
            call LIS_verify(status, 'Error setting Temporal Correlation Scale attribute')

            call ESMF_AttributeSet(pertField(n), "X Correlation Scale", &
                 obs_pert%xcorr(1), rc=status)
            call LIS_verify(status, 'Error setting X Correlation Scale attribute')

            call ESMF_AttributeSet(pertField(n), "Y Correlation Scale", &
                 obs_pert%ycorr(1), rc=status)
            call LIS_verify(status, 'Error setting Y Correlation Scale attribute')

            call ESMF_AttributeSet(pertField(n), "Cross Correlation Strength", &
                 obs_pert%ccorr(1,:), itemCount=1, rc=status)
            call LIS_verify(status, 'Error setting Cross Correlation Strength attribute')

            ! Add perturbation field to state
            call ESMF_StateAdd(OBS_Pert_State(n), (/pertField(n)/), rc=status)
            call LIS_verify(status, 'Error in ESMF_StateAdd for OBS_Pert_State')

            ! Deallocate perturbation structure
            deallocate(obs_pert%vname)
            deallocate(obs_pert%perttype)
            deallocate(obs_pert%ssdev)
            deallocate(obs_pert%stdmax)
            deallocate(obs_pert%zeromean)
            deallocate(obs_pert%tcorr)
            deallocate(obs_pert%xcorr)
            deallocate(obs_pert%ycorr)
            deallocate(obs_pert%ccorr)
        endif

        ! Add observation field to state
        call ESMF_StateAdd(OBS_State(n), (/obsField(n)/), rc=status)
        call LIS_verify(status, 'Error in ESMF_StateAdd for OBS_State')

        ! Cleanup
        deallocate(vname)
        deallocate(varmax)
        deallocate(varmin)
        deallocate(ssdev)
    enddo

    write(LIS_logunit,*) '[INFO] Created the States to hold the GPS observations data'

  end subroutine GPSdispObs_setup

end module GPSdispObs_Mod
